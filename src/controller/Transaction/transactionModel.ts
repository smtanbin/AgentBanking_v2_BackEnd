import moment from "moment"
import execute from "../../model/oracleClient"

export default class TransactionModel {
  async statment(mphone: string, fromdate: string, todate: string) {
    if (!fromdate) {
      fromdate = `SELECT REG_DATE FROM AGENT_BANKING.REGINFO WHERE MPHONE = :mphone`
    }

    const sql: string = `* Formatted on 5/30/2022 4:21:37 PM (QP5 v5.381) */ SELECT ROW_NUMBER() OVER (ORDER BY P.TRANS_NO ASC) AS "SL", NVL (P.CR_AMT,0) CR_AMT,NVL (P.DR_AMT,0) DR_AMT, P.TRANS_NO, P.TRANS_DATE, (CASE WHEN CODE = 'RTGSC' THEN NVL ((SELECT 'RTGS Recived with Document ID '|| C.MSGID || ' and ' || NVL (C.INSTRFORNXTAGT,'null') || 'as note' FROM AGENT_BANKING.ABS_RTGS_TRANSACTION_DST C WHERE C.ST_DOCNUM = P.TRANS_NO), 'RTGS Recived From a Unknown Bank') WHEN CODE = 'DS' THEN NVL (( SELECT 'Refund to Bank. Remarks: "' || REMARKS || '"' FROM AGENT_BANKING.TBL_BD_STATUS TBL WHERE TBL.TRANNO = P.TRANS_NO), 'Refund to Bank') WHEN CODE = 'EFTC' THEN NVL (( SELECT 'Eft Recived From Bank ' || ( SELECT BANK || ' ' || BRANCH FROM tanbin.BANK_ROUTING WHERE ROUTING_NO = ORBANKRT) || '(' || ORBANKRT || ')' FROM AGENT_BANKING.BEFTN_PROCESS_INFO_IN C WHERE C.TR_NO = P.TRANS_NO), 'Eft Recived From a Unknown Bank') WHEN CODE = 'CEFT' THEN NVL (( SELECT 'Eft Send To Bank ' || ( SELECT BANK || ' ' || BRANCH FROM tanbin.BANK_ROUTING WHERE ROUTING_NO = C.ROUTING_NO) || '(' || ROUTING_NO || ')' || ' Account No ' || TRANS_TO || '(' || NAME_TO || ')' FROM AGENT_BANKING.EFT_INFO C WHERE C.TRANS_NO = P.TRANS_NO), 'Eft Send To A Unknown Bank') WHEN CODE = 'CC' THEN NVL ( (CASE WHEN ( SELECT cc.HOTKEY FROM ( SELECT * FROM AGENT_BANKING.GL_TRANS_MST UNION SELECT * FROM AGENT_BANKING.GL_TRANS_MST_old) cc WHERE cc.TRANS_NO = P.TRANS_NO) = 'INSTALLMENT' AND ( SELECT cd.TRANS_FROM FROM ( SELECT * FROM AGENT_BANKING.GL_TRANS_MST UNION SELECT * FROM AGENT_BANKING.GL_TRANS_MST_old) cd WHERE cd.TRANS_NO = P.TRANS_NO) = P.BALANCE_MPHONE THEN ( SELECT 'Premium for Scheam account ' || TRANS_TO FROM ( SELECT * FROM AGENT_BANKING.GL_TRANS_MST UNION SELECT * FROM AGENT_BANKING.GL_TRANS_MST_old) WHERE TRANS_NO = P.TRANS_NO) WHEN ( SELECT cc.HOTKEY FROM ( SELECT * FROM AGENT_BANKING.GL_TRANS_MST UNION SELECT * FROM AGENT_BANKING.GL_TRANS_MST_old) cc WHERE cc.TRANS_NO = P.TRANS_NO) = 'INSTALLMENT' AND ( SELECT cd.TRANS_TO FROM ( SELECT * FROM AGENT_BANKING.GL_TRANS_MST UNION SELECT * FROM AGENT_BANKING.GL_TRANS_MST_old) cd WHERE cd.TRANS_NO = P.TRANS_NO) = P.BALANCE_MPHONE THEN ( SELECT 'Premium Recived from ' || TRANS_FROM FROM ( SELECT * FROM AGENT_BANKING.GL_TRANS_MST UNION SELECT * FROM AGENT_BANKING.GL_TRANS_MST_old)) WHEN ( SELECT cc.HOTKEY FROM ( SELECT * FROM AGENT_BANKING.GL_TRANS_MST UNION SELECT * FROM AGENT_BANKING.GL_TRANS_MST_old) cc WHERE cc.TRANS_NO = P.TRANS_NO) = 'MT' AND ( SELECT cd.TRANS_FROM FROM ( SELECT * FROM AGENT_BANKING.GL_TRANS_MST UNION SELECT * FROM AGENT_BANKING.GL_TRANS_MST_old) cd WHERE cd.TRANS_NO = P.TRANS_NO) = P.BALANCE_MPHONE THEN ( SELECT 'Fund Transfer to account ' || TRANS_TO FROM ( SELECT * FROM AGENT_BANKING.GL_TRANS_MST UNION SELECT * FROM AGENT_BANKING.GL_TRANS_MST_old) WHERE TRANS_NO = P.TRANS_NO) WHEN (SELECT cc.HOTKEY FROM (SELECT * FROM AGENT_BANKING.GL_TRANS_MST UNION SELECT * FROM AGENT_BANKING.GL_TRANS_MST_old) cc WHERE cc.TRANS_NO = P.TRANS_NO) = 'MT' AND (SELECT cd.TRANS_TO FROM (SELECT * FROM AGENT_BANKING.GL_TRANS_MST UNION SELECT * FROM AGENT_BANKING.GL_TRANS_MST_old) cd WHERE cd.TRANS_NO = P.TRANS_NO) = P.BALANCE_MPHONE THEN (SELECT 'Fund Recived from ' || TRANS_FROM FROM (SELECT * FROM AGENT_BANKING.GL_TRANS_MST UNION SELECT * FROM AGENT_BANKING.GL_TRANS_MST_old) WHERE TRANS_NO = P.TRANS_NO) END), P.PARTICULAR) WHEN CODE NOT IN ('EFTC','CEFT','RTGSC','CC') THEN P.PARTICULAR WHEN CODE IS NULL THEN P.PARTICULAR END) PARTICULAR FROM (SELECT * FROM AGENT_BANKING.GL_TRANS_DTL UNION SELECT * FROM AGENT_BANKING.GL_TRANS_DTL_OLD) P WHERE BALANCE_MPHONE = TO_CHAR(:mphone) AND TRUNC (TRANS_DATE) BETWEEN :fromdate AND TO_DATE(:to date) ORDER BY TRANS_NO ASC`
    const bindParams = [
      mphone.toString(),
      fromdate.toString(),
      todate.toString(),
    ]
    const payload = await execute(sql, bindParams)
    return payload.rows
  }
  async ministatment(mphone: string) {
    const _balance: any = await execute(
      `SELECT round(TANBIN.FUNC_GET_ACC_BALANCE(${mphone.toString()},TRUNC (SYSDATE) - INTERVAL '1' DAY),2)balance FROM dual`
    )
    let balance: number = 0

    balance = _balance.rows[0].BALANCE

    const sql: string = `SELECT NVL (P.CR_AMT,0) CR_AMT,NVL (P.DR_AMT,0) DR_AMT, P.TRANS_NO, to_date(P.TRANS_DATE), (CASE WHEN CODE = 'RTGSC' THEN NVL ((SELECT 'RTGS Recived with Document ID '|| C.MSGID || ' and ' || NVL (C.INSTRFORNXTAGT,'null') || 'as note' FROM AGENT_BANKING.ABS_RTGS_TRANSACTION_DST C WHERE C.ST_DOCNUM = P.TRANS_NO), 'RTGS Recived From a Unknown Bank') WHEN CODE = 'DS' THEN NVL (( SELECT 'Refund to Bank. Remarks: "' || REMARKS || '"' FROM AGENT_BANKING.TBL_BD_STATUS TBL WHERE TBL.TRANNO = P.TRANS_NO), 'Refund to Bank') WHEN CODE = 'EFTC' THEN NVL (( SELECT 'Eft Recived From Bank ' || ( SELECT BANK || ' ' || BRANCH FROM tanbin.BANK_ROUTING WHERE ROUTING_NO = ORBANKRT) || '(' || ORBANKRT || ')' FROM AGENT_BANKING.BEFTN_PROCESS_INFO_IN C WHERE C.TR_NO = P.TRANS_NO), 'Eft Recived From a Unknown Bank') WHEN CODE = 'CEFT' THEN NVL (( SELECT 'Eft Send To Bank ' || ( SELECT BANK || ' ' || BRANCH FROM tanbin.BANK_ROUTING WHERE ROUTING_NO = C.ROUTING_NO) || '(' || ROUTING_NO || ')' || ' Account No ' || TRANS_TO || '(' || NAME_TO || ')' FROM AGENT_BANKING.EFT_INFO C WHERE C.TRANS_NO = P.TRANS_NO), 'Eft Send To A Unknown Bank') WHEN CODE = 'CC' THEN NVL ( (CASE WHEN ( SELECT cc.HOTKEY FROM ( SELECT * FROM AGENT_BANKING.GL_TRANS_MST UNION SELECT * FROM AGENT_BANKING.GL_TRANS_MST_old) cc WHERE cc.TRANS_NO = P.TRANS_NO) = 'INSTALLMENT' AND ( SELECT cd.TRANS_FROM FROM ( SELECT * FROM AGENT_BANKING.GL_TRANS_MST UNION SELECT * FROM AGENT_BANKING.GL_TRANS_MST_old) cd WHERE cd.TRANS_NO = P.TRANS_NO) = P.BALANCE_MPHONE THEN ( SELECT 'Premium for Scheam account ' || TRANS_TO FROM ( SELECT * FROM AGENT_BANKING.GL_TRANS_MST UNION SELECT * FROM AGENT_BANKING.GL_TRANS_MST_old) WHERE TRANS_NO = P.TRANS_NO) WHEN ( SELECT cc.HOTKEY FROM ( SELECT * FROM AGENT_BANKING.GL_TRANS_MST UNION SELECT * FROM AGENT_BANKING.GL_TRANS_MST_old) cc WHERE cc.TRANS_NO = P.TRANS_NO) = 'INSTALLMENT' AND ( SELECT cd.TRANS_TO FROM ( SELECT * FROM AGENT_BANKING.GL_TRANS_MST UNION SELECT * FROM AGENT_BANKING.GL_TRANS_MST_old) cd WHERE cd.TRANS_NO = P.TRANS_NO) = P.BALANCE_MPHONE THEN ( SELECT 'Premium Recived from ' || TRANS_FROM FROM ( SELECT * FROM AGENT_BANKING.GL_TRANS_MST UNION SELECT * FROM AGENT_BANKING.GL_TRANS_MST_old)) WHEN ( SELECT cc.HOTKEY FROM ( SELECT * FROM AGENT_BANKING.GL_TRANS_MST UNION SELECT * FROM AGENT_BANKING.GL_TRANS_MST_old) cc WHERE cc.TRANS_NO = P.TRANS_NO) = 'MT' AND ( SELECT cd.TRANS_FROM FROM ( SELECT * FROM AGENT_BANKING.GL_TRANS_MST UNION SELECT * FROM AGENT_BANKING.GL_TRANS_MST_old) cd WHERE cd.TRANS_NO = P.TRANS_NO) = P.BALANCE_MPHONE THEN ( SELECT 'Fund Transfer to account ' || TRANS_TO FROM ( SELECT * FROM AGENT_BANKING.GL_TRANS_MST UNION SELECT * FROM AGENT_BANKING.GL_TRANS_MST_old) WHERE TRANS_NO = P.TRANS_NO) WHEN (SELECT cc.HOTKEY FROM (SELECT * FROM AGENT_BANKING.GL_TRANS_MST UNION SELECT * FROM AGENT_BANKING.GL_TRANS_MST_old) cc WHERE cc.TRANS_NO = P.TRANS_NO) = 'MT' AND (SELECT cd.TRANS_TO FROM (SELECT * FROM AGENT_BANKING.GL_TRANS_MST UNION SELECT * FROM AGENT_BANKING.GL_TRANS_MST_old) cd WHERE cd.TRANS_NO = P.TRANS_NO) = P.BALANCE_MPHONE THEN (SELECT 'Fund Recived from ' || TRANS_FROM FROM (SELECT * FROM AGENT_BANKING.GL_TRANS_MST UNION SELECT * FROM AGENT_BANKING.GL_TRANS_MST_old) WHERE TRANS_NO = P.TRANS_NO) END), P.PARTICULAR) WHEN CODE NOT IN ('EFTC','CEFT','RTGSC','CC') THEN P.PARTICULAR WHEN CODE IS NULL THEN P.PARTICULAR END) PARTICULAR FROM (SELECT * FROM AGENT_BANKING.GL_TRANS_DTL UNION SELECT * FROM AGENT_BANKING.GL_TRANS_DTL_OLD) P WHERE BALANCE_MPHONE = TO_CHAR(:mphone) AND TRUNC (TRANS_DATE) BETWEEN (SELECT REG_DATE FROM AGENT_BANKING.REGINFO WHERE MPHONE = :mphone) AND TO_DATE(SYSDATE) ORDER BY TRANS_NO DESC FETCH FIRST 25 ROWS ONLY`
    const bindParams = [mphone.toString()]
    let payload: any = await execute(sql, bindParams)
    payload = payload.rows
    const result: any = []
    payload.map(
      (
        { CR_AMT, DR_AMT, TRANS_NO, TRANS_DATE, PARTICULAR }: any,
        index: number
      ) => {
        balance = balance - CR_AMT + DR_AMT
        const _date = moment(TRANS_DATE).format("lll")
        const obj = {
          SL: index + 1,
          CR_AMT: CR_AMT.toFixed(2),
          DR_AMT: DR_AMT.toFixed(2),
          BALANCE: balance.toFixed(2),
          TRANS_NO,
          TRANS_DATE: _date,
          PARTICULAR,
        }
        result.push(obj)
      }
    )
    return result
  }
}
