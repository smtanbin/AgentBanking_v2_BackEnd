import execute from "../../../model/oracleClient"

export default class FunTables {
  async PendingEvent() {
    const sql: string = `SELECT * FROM AGENT_BANKING.D_TRANSACTIONINFO`
    const bindParams: never[] = []
    const payload = await execute(sql, bindParams)
    return payload.rows
  }
  async Events() {
    const sql: string =
      "SELECT 'Cash Withdrawal' AS PARTICULAR, COUNT(TRANS_NO) AS NO, SUM(PAY_AMT) AS AMT FROM AGENT_BANKING.GL_TRANS_MST WHERE PARTICULAR = 'Cash Withdrawal' UNION ALL SELECT 'Online Cheque Payment' AS PARTICULAR, COUNT(TRANS_NO) AS NO, SUM(PAY_AMT) AS AMT FROM AGENT_BANKING.GL_TRANS_MST WHERE PARTICULAR = 'Online Cheque Payment' UNION ALL SELECT 'Cheque Book Fee' AS PARTICULAR, COUNT(TRANS_NO) AS NO, SUM(PAY_AMT) AS AMT FROM AGENT_BANKING.GL_TRANS_MST WHERE PARTICULAR = 'Cheque Book Fee' UNION ALL SELECT 'Cash Deposit' AS PARTICULAR, COUNT(TRANS_NO) AS NO, SUM(PAY_AMT) AS AMT FROM AGENT_BANKING.GL_TRANS_MST WHERE PARTICULAR = 'Cash Deposit' UNION ALL SELECT 'Outward BEFTN' AS PARTICULAR, COUNT(TRANS_NO) AS NO, SUM(PAY_AMT) AS AMT FROM AGENT_BANKING.GL_TRANS_MST WHERE PARTICULAR = 'Outward BEFTN' UNION ALL SELECT 'Inward BEFTN' AS PARTICULAR, COUNT(TRANS_NO) AS NO, SUM(PAY_AMT) AS AMT FROM AGENT_BANKING.GL_TRANS_MST WHERE PARTICULAR = 'Inward BEFTN' UNION ALL SELECT 'Utility Payment' AS PARTICULAR, COUNT(TRANS_NO) AS NO, SUM(PAY_AMT) AS AMT FROM AGENT_BANKING.GL_TRANS_MST WHERE PARTICULAR = 'Utility Payment' UNION ALL SELECT 'Instant Inward Foreign Remittance' AS PARTICULAR, COUNT(TRANS_NO) AS NO, SUM(PAY_AMT) AS AMT FROM AGENT_BANKING.GL_TRANS_MST WHERE PARTICULAR = 'Instant Inward Foreign Remittance' UNION ALL SELECT 'Account Opened' AS EVENT, COUNT(MPHONE) AS NO, SUM(BALANCE_M) AS AMT FROM AGENT_BANKING.REGINFO WHERE TRUNC(REG_DATE) = TRUNC(SYSDATE) AND STATUS != 'R' UNION ALL SELECT 'Remittance' AS EVENT, COUNT(REM_ID) AS NO, SUM(SEN_REM_AMT) AS AMT FROM AGENT_BANKING.REMITTANCE_INFO WHERE TRUNC(AUTHO_DATE) = TRUNC(SYSDATE) AND STATUS != 'R'"
    const bindParams: never[] = []
    const payload = await execute(sql, bindParams)
    return payload.rows
  }
}
